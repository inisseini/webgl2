{"ast":null,"code":"import { ExtrudeGeometry } from 'three';\nclass TextGeometry extends ExtrudeGeometry {\n  constructor(text) {\n    let parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      bevelEnabled = false,\n      bevelSize = 8,\n      bevelThickness = 10,\n      font,\n      height = 50,\n      size = 100,\n      lineHeight = 1,\n      letterSpacing = 0,\n      ...rest\n    } = parameters;\n    if (font === undefined) {\n      super(); // generate default extrude geometry\n    } else {\n      const shapes = font.generateShapes(text, size, {\n        lineHeight,\n        letterSpacing\n      });\n      super(shapes, {\n        ...rest,\n        bevelEnabled,\n        bevelSize,\n        bevelThickness,\n        depth: height\n      });\n    }\n    this.type = 'TextGeometry';\n  }\n}\nexport { TextGeometry as TextBufferGeometry, TextGeometry };","map":{"version":3,"names":["ExtrudeGeometry","TextGeometry","constructor","text","parameters","bevelEnabled","bevelSize","bevelThickness","font","height","size","lineHeight","letterSpacing","rest","undefined","shapes","generateShapes","depth","type","TextBufferGeometry"],"sources":["C:/Users/issei/Desktop/dev-webGL-exhibition/exhibition/node_modules/three-stdlib/geometries/TextGeometry.js"],"sourcesContent":["import { ExtrudeGeometry } from 'three';\n\nclass TextGeometry extends ExtrudeGeometry {\n  constructor(text, parameters = {}) {\n    const {\n      bevelEnabled = false,\n      bevelSize = 8,\n      bevelThickness = 10,\n      font,\n      height = 50,\n      size = 100,\n      lineHeight = 1,\n      letterSpacing = 0,\n      ...rest\n    } = parameters;\n\n    if (font === undefined) {\n      super(); // generate default extrude geometry\n    } else {\n      const shapes = font.generateShapes(text, size, {\n        lineHeight,\n        letterSpacing\n      });\n      super(shapes, { ...rest,\n        bevelEnabled,\n        bevelSize,\n        bevelThickness,\n        depth: height\n      });\n    }\n\n    this.type = 'TextGeometry';\n  }\n\n}\n\nexport { TextGeometry as TextBufferGeometry, TextGeometry };\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,OAAO;AAEvC,MAAMC,YAAY,SAASD,eAAe,CAAC;EACzCE,WAAW,CAACC,IAAI,EAAmB;IAAA,IAAjBC,UAAU,uEAAG,CAAC,CAAC;IAC/B,MAAM;MACJC,YAAY,GAAG,KAAK;MACpBC,SAAS,GAAG,CAAC;MACbC,cAAc,GAAG,EAAE;MACnBC,IAAI;MACJC,MAAM,GAAG,EAAE;MACXC,IAAI,GAAG,GAAG;MACVC,UAAU,GAAG,CAAC;MACdC,aAAa,GAAG,CAAC;MACjB,GAAGC;IACL,CAAC,GAAGT,UAAU;IAEd,IAAII,IAAI,KAAKM,SAAS,EAAE;MACtB,KAAK,EAAE,CAAC,CAAC;IACX,CAAC,MAAM;MACL,MAAMC,MAAM,GAAGP,IAAI,CAACQ,cAAc,CAACb,IAAI,EAAEO,IAAI,EAAE;QAC7CC,UAAU;QACVC;MACF,CAAC,CAAC;MACF,KAAK,CAACG,MAAM,EAAE;QAAE,GAAGF,IAAI;QACrBR,YAAY;QACZC,SAAS;QACTC,cAAc;QACdU,KAAK,EAAER;MACT,CAAC,CAAC;IACJ;IAEA,IAAI,CAACS,IAAI,GAAG,cAAc;EAC5B;AAEF;AAEA,SAASjB,YAAY,IAAIkB,kBAAkB,EAAElB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}